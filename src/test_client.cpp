#include "test_interface.hpp"

void run_word_test();
void run_generate_code_test();
int main();

// Execute the Word tests
void run_word_test() {

    std::vector<Word> list_words;       // defined list of word for testing
    std::size_t count{0};               // the current count of words
    char type{'\0'};                    // input
    int i_val{};                        // int value
    unsigned int u_i_val{};             // unsigned int value
    std::string s_val{};                // string value

    
    std::cin >> type;

    /**
     * Test Methods (Not case sensitive)
     * E - Create a default constructor test for Word, then print out the result
     * I - Create a signed int test for Word, then print out the result
     * S - Create a string test for Word, then print out the result
     * U - Create an unsigned int test for Word, then print out the result
     */
    switch (type) {
    case 'e': case 'E':
        // construct, print, add to count
        list_words.emplace_back(Word{});
        std::cout << "Word #" << count << " is: " << list_words.at(count) << std::endl;
        count++;
        break;

    case 'i': case 'I':
        // read user input for an signed int
        std::cin >> i_val;
        // construct, print, add to count
        list_words.emplace_back(Word{i_val});
        std::cout << "Word #" << count << " is: " << list_words.at(count) << std::endl;
        count++;
        break;

    case 's': case 'S':
        // read user input for a formated string
        std::cin >> s_val;
        // construct, print, add to count
        list_words.emplace_back(Word{s_val});
        std::cout << "Word #" << count << " is: " << list_words.at(count) << std::endl;
        count++;
        break;

    case 'u': case 'U':
        // read user input for an unsigned int
        std::cin >> u_i_val;
        // construct, print, add to count
        list_words.emplace_back(Word{u_i_val});
        std::cout << "Word #" << count << " is: " << list_words.at(count) << std::endl;
        count++;
        break;
    
    default:
        break;
    }

}

// Execute the Generate Code tests
void run_generate_code_test() {

    std::vector<Word> list_words;       // defined list of word for testing
    std::size_t count{0};               // the current count of words
    char type{'\0'};                    // input
    unsigned int rd;                    // rd
    unsigned int rs1;                   // rs1
    unsigned int rs2;                   // rs2

    
    std::cin >> type;

    /**
     * Test Methods (Not case sensitive)
     * 
     * R - Run R-type Instructions
     *     + - Run add Instruction
     */
    switch (type) {
    case 'r': case 'R':

        std::cin >> type;
            
        switch (type) {
        case '+':
            // Read input registers
            std::cin >> rd >> rs1 >> rs2;
            list_words.emplace_back(Gen_Code::add(rd, rs1, rs2));
            // Check if command is valid
            if(list_words.at(count) != Word{}){
                std::cout << "Word generated by add command is: " << list_words.at(count) << std::endl;
            } else {
                std::cout << "An error occured in generating add command, invalid register input." << std::endl;
            }
            count++;
            break;
            
        default:
            break;
        }

        break;
    
    default:
            break;
    }

}

int main() {

    char in;

    /**
     * Test Methods (Not case sensitive)
     * 
     * G - Generate Code tests
     * Q - Quit
     * W - Word tests
     */
    while(std::cin >> in) {

        switch (in) {

        case 'g': case 'G':
            run_generate_code_test();
            break;

        case 'q': case 'Q':
            return 0;
            
        case 'w': case 'W':
            run_word_test();
            break;
        
        default:
            break;
        }

    }

    return 0;

}
